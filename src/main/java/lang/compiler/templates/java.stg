group java;

program(className, functions, data) ::= <<
import java.util.*;

public class <className> {
  <data; separator = "\n\n">

  <functions; separator = "\n\n">
}
>>

function(name, params, decls, cmds, returnType) ::= <<
public static <returnType> <name>(<params; separator = ", ">) {
  <if(decls)><decls; separator = ";\n">;<endif>
  <cmds; separator = "\n">
}
>>

return(value, list, size) ::= <<
<if(list)>
Object[] _returnList = new Object[<size>];
<list; separator = ";\n">;
<endif>
return <value>
>>

listElement(value, pos) ::= "_returnList[<pos>] = <value>"

assignment(lvalue, expr) ::= "<lvalue> = <expr>"

staticFunctionCall(id, args, assignments) ::= <<
<assignments; separator = "\n">
>>

lvalue(name) ::= "<name>"

print(expr) ::= "System.out.println(<expr>)"

read(lvalue) ::= <<
Scanner scanner = new Scanner(System.in);
<lvalue> = scanner.nextInt()
>>

literal(value) ::= "<value>"

iterate(expr, cmd) ::= <<
for (int i = 0; i \< <expr>; i++)
  <cmd>
>>

if(expr, ifCmd, elseCmd) ::= <<
if (<expr>)
<ifCmd>
<if(elseCmd)>
else
<elseCmd>
<endif>
>>

assignableFunctionCall(type, id, args, index) ::= <<
(<type>) <id>(<args; separator = ", ">)<if(index)>[<index>]<endif>
>>

commandScope(decls, cmds) ::= <<
{
  <if(decls)><decls; separator = ";\n">;<endif>
  <cmds; separator = "\n">
}
>>

data(name, decls) ::= <<
public class <name> {
  <if(decls)><decls; separator = ";\n">;<endif>
}
>>

decl(type, id) ::= "<type> <id>"

type(name) ::= "<name>"

binaryOperator(leftExpr, symbol, rightExpr) ::= "<leftExpr> <symbol> <rightExpr>"

unaryOperator(symbol, expr) ::= "<symbol><expr>"

new(type, size) ::= "new <type><if(size)>[<size>]<endif>"

balancedParenthesesExpression(expr) ::= "(<expr>)"
