main() {
  print x[0];
  print f12('a')[0];
  print f12(true)[1];
  print f12(true)[2 * 4];
  print f12(true)['c'];
  print f12(true, false)[0];
  print ndef1()[0];
  x = 5;
  x = 'c';
  z = new Int[];
  y = new Char[];
  read y;

  divmod(true, 2)<q, r>;
  divmod(5, 2)<w[0], r>;
  boolean = new Bool;
  divmod(5, 2)<q, boolean>;
  divmod(5, 2)<a, b, c>;
  divmod(5, 2, 4)<q, r>;
  ndef2()<a>;

  iterate (true) {

  }
}

f1() : Float {
  return 3 + false;
}

f2() : Float {
  return 4 - 'c';
}

f3() : Float {
  return 'z' * 8;
}

f4() : Float {
  return true / false;
}

f5() : Float {
  return 3 % true;
}

f6() : Float {
  return 3 && 4;
}

f7() : Float {
  return true < 1;
}

f8() : Float {
  return 3 == 'a';
}

f9() : Float {
  return 3 != 'a';
}

f10() : Float {
  return !'a';
}

f11() : Float {
  return -'a';
}

f12(x :: Bool) : Bool {
  return x;
}

dummy(x :: Char, y :: Int) : Char, Int {
  return x;
}

divmod(q :: Int, r :: Int) : Float, Float {
  return q / r, q % r;
}

fat(x :: Int) : Int {
  if (x < 1) {
    return 1;
  }
  else {
    return x * fat(x - 1)[0];
  }
}
